#GeneName        DistToGene      HumanChr        HIntegrationPos HChr    HStart  HPosition       VirusID VStart  VirusEnd        DiscordantReads SoftclippingReads
#NCAN    0       chr19   19341547        chr19   19341580        19342025        HepatitisBvirus_21326584        2652    3132    27      1

if(length(stdin) > 3){
	stop("ERROR! Incorrect number of arguments. \nUSAGE: circos.Rscript [input integration file] [input directory ] [output directory] [ library ]")
}

input<-commandArgs(TRUE)[1]
inputDir<-commandArgs(TRUE)[2]
outputDir<-commandArgs(TRUE)[3]
libNeed<-commandArgs(TRUE)[4]

.libPaths(libNeed)
data<-read.table(input,header=T,sep="\t",stringsAsFactor=F)

matrix<-data.frame(data[,c(3:4)],hight=data[,11]+data[,12])
print(matrix)

library(circlize)

#png("human.circos.png")
cirosplot <- paste(outputDir,"/human.circos.png", sep="", collapse=NULL)
png(file=cirosplot, units="in", width=20, height=20, res=300)
cat ("circos....\n\n")

circos.initializeWithIdeogram()
circos.trackPlotRegion(ylim = c(0, 2), bg.border = NA, bg.col ="#EEEEEE",
                       track.height = 0.2, panel.fun = function(x, y) {
                         xlim = get.cell.meta.data("xlim")
                         ylim = get.cell.meta.data("ylim")
                         for(i in 0:4) {
                           circos.lines(xlim, c(i, i)/2, col = "#999999", lwd = 0.2)
                         }
                         xrange = get.cell.meta.data("xrange")
                       })
max_hight=max(matrix[,3])
virus <- factor( data$VirusID )
virus_species <- as.character ( levels(virus) )
colors<-rainbow(nlevels(virus))

for(i in 1:dim(matrix)[1]){
	circos.lines( rep(as.numeric(matrix[i,2]),2), c(0, 2*matrix[i,3]/max_hight),sector.index=matrix[i,1],pch=20,col=colors[as.numeric(virus[i])],lwd=4)
	
}

cat("circos track2..\n\n.")

bed <- data[,c(3,4,4,1)]

# empty track for lines
circos.genomicTrackPlotRegion(bed, ylim = c(0, 1), track.height = 0.1, bg.border = NA)
i_track2 = get.cell.meta.data("track.index") # the empty track

# track for lables
circos.genomicTrackPlotRegion(bed, ylim = c(0, 1),
panel.fun = function(region, value, ...) {
circos.genomicText(region, value, y = 0, labels.column = 1,
facing = "clockwise", adj = c(0, 0.5), posTransform = posTransform.text,
cex = 2, padding = 0.3)
}, track.height = 0.15, bg.border = NA)
i_track = get.cell.meta.data("track.index") # the label track

# go back to draw the lines between two tracks. 
circos.genomicPosTransformLines(bed,
posTransform = function(region, value) posTransform.text(region, y = 0,
labels = value[[1]], cex = 2, padding = 0.2, track.index = i_track), direction = "inside",track.index=i_track2)

dev.off()


# generate a plot for each virus ... 
#integration<-read.table(input,header=T,sep="\t",stringsAsFactor=F)

for (j in 1: length(virus_species)){
	cat(" read the coverage file \n")
	coverageInput<- paste(inputDir,"/.coverage/",virus_species[j],".coverage.out",sep="")
	coverage <-read.table(coverageInput,header=F,sep="\t",stringsAsFactor=F)
	#cat(" read the coverage file 1 \n")
	# subset only this virus for integration site
	integration<- data [ which(data$VirusID == coverage[1,1]),8:12]
	integration$height<- log2((integration$DiscordantReads+integration$HumanSoftClipping)/2+1)
	#cat(" read the coverage file 2 \n")
	# normalize coverage
	coverage[,4]<-log2(coverage[,4]+1)
	max_h<-max(coverage[,4])
	coverage[,4]<-coverage[,4]/max_h
	cat("normalized coverage. 4th column\n")
	print(head(coverage))
	df = data.frame( name=coverage[1,1], start=coverage[1,2],end=coverage[dim(coverage)[1],3])


	#png("virus.circos.png")
	png(file=paste(outputDir,"/",virus_species[j],".coverage.png",sep=""), units="in", width=20, height=20, res=300)
	circos.genomicInitialize(df)
	# plot integration site. Color using the same color above.
	circos.genomicTrackPlotRegion(ylim = c(0, 1),bg.col = "#EEEEEE",bg.border = NA, track.height = 0.1)
	for (i in 1: dim(integration)[1]){
        	circos.lines(rep(  (integration$VStart[i] + integration$VirusEnd[i] )/2 ,2), c(0, integration$height[i]/max(integration$height)   ),sector.index=integration$VirusID[i],pch=20,col=colors[j],lwd=2)
	}
	bed = coverage

	cat("bed files \n")
	#write.table(bed,file=paste(virus_species[j],".coverage.bed",sep=""),quote=F,sep="\t")
	print( head(bed))
	print( tail(bed))
	# plot coverage. 
	circos.genomicTrackPlotRegion(bed, ylim=c(0,1),
	panel.fun = function(region, value, ...) {
		circos.genomicRect(region, value, ytop.column = 1, ybottom = 0,  col="#EEEEEE",
	 ...)
	 cell.xlim = get.cell.meta.data("cell.xlim")
	 circos.lines(cell.xlim, c(0, 0), lty = 2, col = "black")
	 })

 	dev.off()
}
